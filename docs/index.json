[
{
	"uri": "https://carmelolg.github.io/JCAL/about-jcal/",
	"title": "About JCAL",
	"tags": null,
	"description": "",
	"content": "What is a Cellular Automata Here some references:\nWolfram - Cellular Automaton The nature of Code by Daniel Shiffman Chapter 3 of my master thesis (in italian) TLDR; A basic Cellular Automata is the quadruple \u0026lt;Zd,S,X, α\u0026gt;\nZd is a set of cells, a d-dimension matrix of cells\nS is a set of status where the single cell can be in\nX is a set of cell\u0026rsquo;s neighbors (the most common neighborhood implementation are MOORE and VON NEUMANN\nα is the transition function. This function implements the evolution of the natural or artificial phenomena represented by a Cellular Automata.\nThanks to this mathematic model, it\u0026rsquo;s possible represent a lot of natural phenomena like landslides, lava flows and so on\u0026hellip;\nWhat about JCAL idea In the past, during my master thesis\u0026rsquo;s work, I contribuited to implement a library for Cellular Automata, mainly used by Physicists, Geologists and Scientists from different departments. This library was written in C++ and obviously was more complete than JCAL.\nJCAL wants to implements the same idea but in a smaller and simpler way for Java user and developers.\n"
},
{
	"uri": "https://carmelolg.github.io/JCAL/getting-started/",
	"title": "Getting started",
	"tags": null,
	"description": "",
	"content": "Static installation Download the jar file Here the jar file.\nSteps Import the jar as static import on your Java project Include on your build path the jar. Use it and/or try the basic settings. Maven projects Github Maven Repository The following guide helps you to install maven packages directly from Github.\nHere the snippet to put on your pom.xml\nCopy \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;it.carmelolagamba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jcal\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0.alpha\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Official Maven repository Not available yet\n"
},
{
	"uri": "https://carmelolg.github.io/JCAL/basic-settings/",
	"title": "Basic settings",
	"tags": null,
	"description": "",
	"content": "Implement the transition function You need to inherit the CellularAutmataExecutor class and implement the singleRun method.\nCopy public class GOLExecutor extends CellularAutomataExecutor { @Override public DefaultCell singleRun(DefaultCell cell, List\u0026lt;DefaultCell\u0026gt; neighbors) { DefaultStatus dead = new DefaultStatus(\u0026#34;dead\u0026#34;, \u0026#34;0\u0026#34;); DefaultStatus alive = new DefaultStatus(\u0026#34;alive\u0026#34;, \u0026#34;1\u0026#34;); Long alives = neighbors.stream().filter(item -\u0026gt; item.currentStatus.equals(alive)).count(); DefaultCell toReturn = new DefaultCell(null, cell.getRow(), cell.getCol()); if (cell.currentStatus.equals(dead) \u0026amp;\u0026amp; alives == 3) { toReturn.currentStatus = alive; } else if (cell.currentStatus.equals(alive) \u0026amp;\u0026amp; (alives == 2 || alives == 3)) { toReturn.currentStatus = alive; } else { toReturn.currentStatus = dead; } return toReturn; } } Run the cellular automata Here an example using a classic Java Main\nCopy public class Main { public static int WIDTH = 10, HEIGHT = 10; public static DefaultStatus dead = new DefaultStatus(\u0026#34;dead\u0026#34;, \u0026#34;0\u0026#34;); public static DefaultStatus alive = new DefaultStatus(\u0026#34;alive\u0026#34;, \u0026#34;1\u0026#34;); public static List\u0026lt;DefaultStatus\u0026gt; status = Arrays.asList(dead, alive); public static List\u0026lt;DefaultCell\u0026gt; initalState = new ArrayList\u0026lt;DefaultCell\u0026gt;(); public static void main(String[] args) throws Exception { initalState.add(new DefaultCell(alive, 1, 1)); initalState.add(new DefaultCell(alive, 1, 2)); initalState.add(new DefaultCell(alive, 1, 3)); initalState.add(new DefaultCell(alive, 2, 1)); CellularAutomataConfigurationBuilder configBuilder = new CellularAutomataConfigurationBuilder(); CellularAutomataConfiguration config = configBuilder.setHeight(WIDTH) .setWidth(HEIGHT) .setTotalIterations(10) .setStatusList(status) .setNeighborhoodType(NeighborhoodType.MOORE) .setInitalState(initalState) /** ... */ .build(); CellularAutomata ca = new CellularAutomata(config); GOLExecutor executor = new GOLExecutor(); ca = executor.run(ca); System.out.println(ca); } } "
},
{
	"uri": "https://carmelolg.github.io/JCAL/builder-settings/",
	"title": "Configurations properties",
	"tags": null,
	"description": "",
	"content": "If you want to build your own cellular automata configuration (CellularAutomataConfiguration), you must use the CellularAutomataConfigurationBuilder.\nThe following example shows you how to build a configuration.\nPlease remember that creating an instance of CellularAutomataConfiguration is mandatory in order to create an instance of CellularAutomata. Copy CellularAutomataConfigurationBuilder configBuilder = new CellularAutomataConfigurationBuilder(); CellularAutomataConfiguration config = configBuilder.setHeight(50) .setWidth(50) .setTotalIterations(10) .setStatusList(/* a List */) .setNeighborhoodType(NeighborhoodType.MOORE) .setInitalState(/* a List */) /** ... */ .build(); On this page, I will show you all the possible configuration options that you can use.\nWidth Set the matrix width (the number of columns).\nDefault is 100\nParams Type width number Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setWidth(int width); Height Set the matrix height (the number of rows)\nDefault is 100\nParams Type height number Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setHeight(int height); Infinite Loop If you want to loop infinitely, simply set the following configuration to true.\nDefault is false\nParams Type isInfinite boolean Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setInfinite(boolean isInfinite); Total interactions Set the number of iterations of the transition function\nThis parameter is mandatory if isInfinite is not setted.\nParams Type totalIterations number Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setTotalIterations(int totalIterations); List of status Set the list of status usable on the Cellular Automata.\nThis parameter is mandatory.\nParams Type statusList List of DefaultStatus Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setStatusList(List\u0026lt;DefaultStatus\u0026gt; statusList); Initial condition Set the initial configuration from where to start the cellular automata. In other words, set the cells that have a different status than empty/dead in the starting phase.\nParams Type initalState List of DefaultCell Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setInitalState(List\u0026lt;DefaultCell\u0026gt; initalState); Default Neighborhood If you don\u0026rsquo;t have a custom neighborhood you can choose one already implemented in the NeighborhoodType enum.\nParams Type neighborhoodType NeighborhoodType Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setNeighborhoodType(NeighborhoodType neighborhoodType); Custom Neighborhood If you have a custom neighborhood, you can set your class here.\nThe class has to inerhit the DefaultNeighborhood class.\nParams Type neighborhood DefaultNeighborhood Here is the signature of the method:\npublic CellularAutomataConfigurationBuilder setNeighborhood(DefaultNeighborhood neighborhood); "
},
{
	"uri": "https://carmelolg.github.io/JCAL/custom-status/",
	"title": "Custom status",
	"tags": null,
	"description": "",
	"content": ""
},
{
	"uri": "https://carmelolg.github.io/JCAL/",
	"title": "",
	"tags": null,
	"description": "",
	"content": " Author carmelolg License Unit Test Test Coverage The current version (1.0.0.alpha) is not production ready. Features Cellular Automata first. JCAL is implemented for building cellular automata easily. Complex Cellular Automata (CCA) are not supported yet. Less is more. Less code, less time waste. You can build your CA in a few code lines. Designed for JAVA. The library is written Java 17 for Java users. Acknowledgements University of Calabria for teaching me really excited things. "
},
{
	"uri": "https://carmelolg.github.io/JCAL/categories/",
	"title": "Categories",
	"tags": null,
	"description": "",
	"content": ""
},
{
	"uri": "https://carmelolg.github.io/JCAL/tags/",
	"title": "Tags",
	"tags": null,
	"description": "",
	"content": ""
}]
